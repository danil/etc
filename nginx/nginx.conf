# This is example contains the bare mininum to get nginx going with
# Unicorn or Rainbows! servers.  Generally these configuration settings
# are applicable to other HTTP application servers (and not just Ruby
# ones), so if you have one working well for proxying another app
# server, feel free to continue using it.
#
# The only setting we feel strongly about is the fail_timeout=0
# directive in the "upstream" block.  max_fails=0 also has the same
# effect as fail_timeout=0 for current versions of nginx and may be
# used in its place.
#
# Users are strongly encouraged to refer to nginx documentation for more
# details and search for other example configs.

# # drop privileges, root is needed on most systems for binding to port 80
# # (or anything < 1024).  Capability-based security may be available for
# # your system and worth checking out so you won't need to be root to
# # start nginx to bind on 80
#user nobody nogroup; # for systems with a "nogroup"
# user nobody nobody; # for systems with "nobody" as a group instead
user nginx nginx;

# you generally only need one nginx worker unless you're serving
# large amounts of static files which require blocking disk reads
# Danil.
# Number of worker processes equals
# the number of accessible processor cores
# <https://www.linode.com/docs/security/ssl/ssl-certificates-with-nginx#optimizing-nginx-for-ssl>.
# worker_processes 1;
worker_processes 2;

# Feel free to change all paths to suite your needs here, of course
# pid /tmp/nginx.pid;
# error_log /tmp/nginx.error.log;
error_log /var/log/nginx/error_log info;

events {
  worker_connections 1024; # increase if you have lots of clients
  # Danil.
  # If accept_mutex is enabled, worker processes will accept new
  # connections by turn. Otherwise, all worker processes will be
  # notified about new connections, and if volume of new
  # connections is low, some of the worker processes may just
  # waste system resources.
  # <http://nginx.org/en/docs/ngx_core_module.html#accept_mutex>.
  accept_mutex off; # "on" if nginx worker_processes > 1
  use epoll; # enable for Linux 2.6+
  # use kqueue; # enable for FreeBSD, OSX
}

http {
  # nginx will find this file in the config directory set at nginx build time
  include /etc/nginx/mime.types;

  # fallback in case we can't determine a type
  default_type application/octet-stream;

  # click tracking!
  # access_log /tmp/nginx.access.log combined;
  log_format main
    '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $bytes_sent '
    '"$http_referer" "$http_user_agent" '
    '"$gzip_ratio"';

  client_header_timeout 10m;
  client_body_timeout 10m;
  send_timeout 10m;

  # you generally want to serve static files with nginx since neither
  # Unicorn nor Rainbows! is optimized for it at the moment
  sendfile on;

  tcp_nopush on; # off may be better for *some* Comet/long-poll stuff
  # tcp_nodelay on;
  tcp_nodelay off; # on may be better for some Comet/long-poll stuff

  connection_pool_size 256;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 2k;
  request_pool_size 4k;

  output_buffers 1 32k;
  postpone_output 1460;

  keepalive_timeout 75 20;

  ignore_invalid_headers on;

  index index.html;

  # we haven't checked to see if Rack::Deflate on the app server is
  # faster or not than doing compression via nginx.  It's easier
  # to configure it all in one place here for static files and also
  # to disable gzip for clients who don't get gzip/deflate right.
  # There are other other gzip settings that may be needed used to deal with
  # bad clients out there, see http://wiki.nginx.org/NginxHttpGzipModule
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  # gzip_min_length 500;
  gzip_min_length 1100;

  # Make sure gzip does not lose large gzipped js or css files
  # see <http://blog.leetsoft.com/2007/7/25/nginx-gzip-ssl>.
  # gzip_buffers 4 8k;
  gzip_buffers 16 8k;

  gzip_types text/plain text/xml text/css
             text/comma-separated-values
             text/javascript application/javascript application/x-javascript
             application/xml application/xml+rss
             application/atom+xml;

  # Disable gzip for certain browsers.
  # Netscape 4.x has some problems...
  # Netscape 4.06-4.08 have some more problems.
  # MSIE masquerades as Netscape, but it is fine
  gzip_disable "MSIE [1-6]\." "^Mozilla/4" "^Mozilla/4\.0[678]";

  # Danil.
  # <https://www.linode.com/docs/security/ssl/ssl-certificates-with-nginx#optimizing-nginx-for-ssl>.
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout 10m;

  # server {
  #   listen 127.0.0.1;
  #   server_name localhost;

  #   access_log /var/log/nginx/localhost.access_log main;
  #   error_log /var/log/nginx/localhost.error_log info;

  #   root /var/www/localhost/htdocs;
  # }

  # SSL example
  #server {
  #   listen 127.0.0.1:443;
  #   server_name localhost;

  #   ssl on;
  #   ssl_certificate /etc/ssl/nginx/nginx.pem;
  #   ssl_certificate_key /etc/ssl/nginx/nginx.key;

  #   access_log /var/log/nginx/localhost.ssl_access_log main;
  #   error_log /var/log/nginx/localhost.ssl_error_log info;

  #   root /var/www/localhost/htdocs;
  #}

  # Danil.
  charset utf-8;
  include ./sites-enable/*;
}
